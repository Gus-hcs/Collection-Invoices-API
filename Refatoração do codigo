import pyodbc
import requests
import xml.etree.ElementTree as ET
import time

#Refatoração

# Configurações
namespace = {'nfe': 'http://www.portalfiscal.inf.br/nfe'}
server = 'ip do banco'
database = 'nome do banco'
username = 'user'
password = 'senha'
api_key = 'TOKEN'
page = 1
tipo = "S" # TIPO DA NOTA

# Conexão com o banco de dados
def connect_to_database():
    try:
        connection = pyodbc.connect(f'DRIVER={{SQL Server}};SERVER={server};DATABASE={database};UID={username};PWD={password}')
        return connection
    except pyodbc.Error as e:
        print(f"Erro ao conectar-se ao banco de dados: {str(e)}")
        return None

# Solicitação da API
def make_request_with_retry(url, delay=1, max_retries=5):
    for _ in range(max_retries):
        response = requests.get(url)
        if response.status_code == 429:
            print("Limite de requisições atingido. Aguardando para tentar novamente.")
            time.sleep(delay)
        else:
            return response
    return None

# Obtenção de dados XML
def get_xml_data(xml_url):
    try:
        xml_response = requests.get(xml_url)
        if xml_response.status_code == 200:
            return xml_response.text
        else:
            print(f"Erro na solicitação HTTP do link XML: Código {xml_response.status_code}")
            return None
    except requests.exceptions.RequestException as e:
        print(f"Erro ao conectar-se à API: {str(e)}")
        return None

# Inserção de dados no banco de dados
def insert_data_into_database(cursor, xml_data):
    try:
        if xml_data is not None:
            root = ET.fromstring(xml_data)
            infnfe_elements = root.findall('.//nfe:infNFe', namespaces=namespace)
            for infnfe_element in infnfe_elements:
                ide_data = extract_ide_data(infnfe_element)
                emit_data = extract_emit_data(infnfe_element)
                dest_data = extract_dest_data(infnfe_element)
                total_data = extract_total_data(infnfe_element)
                det_elements = infnfe_element.findall('.//nfe:det', namespaces=namespace)
                for det_element in det_elements:
                    prod_data, imposto_data = extract_det_data(det_element)
                    insert_into_db(cursor, ide_data, emit_data, dest_data, total_data, prod_data, imposto_data)
    except Exception as e:
        print(f"Erro ao inserir dados no banco de dados: {str(e)}")

# Extração de dados do elemento IDE
def extract_ide_data(infnfe_element):
    ide_element = infnfe_element.find('.//nfe:ide', namespaces=namespace)
    return {
        'nfe_id': str(infnfe_element.get('Id')),
        'cUF_ide': get_text_from_element(ide_element, 'cUF'),
        'cNF_ide': get_text_from_element(ide_element, 'cNF'),
        'natOp_ide': get_text_from_element(ide_element, 'natOp'),
        'mod_ide': get_text_from_element(ide_element, 'mod'),
        'serie_ide': get_text_from_element(ide_element, 'serie'),
        'nNF_ide': get_text_from_element(ide_element, 'nNF'),
        'dhEmi_ide': get_text_from_element(ide_element, 'dhEmi'),
        'dhSaiEnt_ide': get_text_from_element(ide_element, 'dhSaiEnt'),
        'tpNF_ide': get_text_from_element(ide_element, 'tpNF'),
        'idDest_ide': get_text_from_element(ide_element, 'idDest'),
        'cMunFG_ide': get_text_from_element(ide_element, 'cMunFG'),
        'tpImp_ide': get_text_from_element(ide_element, 'tpImp'),
        'tpEmis_ide': get_text_from_element(ide_element, 'tpEmis'),
        'cDV_ide': get_text_from_element(ide_element, 'cDV'),
        'tpAmb_ide': get_text_from_element(ide_element, 'tpAmb'),
        'finNFe_ide': get_text_from_element(ide_element, 'finNFe'),
        'indFinal_ide': get_text_from_element(ide_element, 'indFinal'),
        'indPres_ide': get_text_from_element(ide_element, 'indPres'),
        'indIntermed_ide': get_text_from_element(ide_element, 'indIntermed'),
        'procEmi_ide': get_text_from_element(ide_element, 'procEmi'),
        'verProc_ide': get_text_from_element(ide_element, 'verProc')
    }

# Extração de dados do elemento EMIT
def extract_emit_data(infnfe_element):
    emit_element = infnfe_element.find('.//nfe:emit', namespaces=namespace)
    enderEmit_element = emit_element.find('.//nfe:enderEmit', namespaces=namespace)
    return {
        'CNPJ_emit': get_text_from_element(emit_element, 'CNPJ'),
        'xNome_emit': get_text_from_element(emit_element, 'xNome'),
        'xFant_emit': get_text_from_element(emit_element, 'xFant'),
        'xLgr_enderEmit': get_text_from_element(enderEmit_element, 'xLgr'),
        'nro_enderEmit': get_text_from_element(enderEmit_element, 'nro'),
        'xCpl_enderEmit': get_text_from_element(enderEmit_element, 'xCpl'),
        'xBairro_enderEmit': get_text_from_element(enderEmit_element, 'xBairro'),
        'cMun_enderEmit': get_text_from_element(enderEmit_element, 'cMun'),
        'xMun_enderEmit': get_text_from_element(enderEmit_element, 'xMun'),
        'UF_enderEmit': get_text_from_element(enderEmit_element, 'UF'),
        'CEP_enderEmit': get_text_from_element(enderEmit_element, 'CEP'),
        'cPais_enderEmit': get_text_from_element(enderEmit_element, 'cPais'),
        'xPais_enderEmit': get_text_from_element(enderEmit_element, 'xPais'),
        'fone_enderEmit': get_text_from_element(enderEmit_element, 'fone'),
        'IE_emit': get_text_from_element(emit_element, 'IE'),
        'IM_emit': get_text_from_element(emit_element, 'IM'),
        'CNAE_emit': get_text_from_element(emit_element, 'CNAE'),
        'CRT_emit': get_text_from_element(emit_element, 'CRT')
    }

# Extração de dados do elemento DEST
def extract_dest_data(infnfe_element):
    dest_element = infnfe_element.find('.//nfe:dest', namespaces=namespace)
    enderDest_element = dest_element.find('.//nfe:enderDest', namespaces=namespace)
    return {
        'CNPJ_dest': get_text_from_element(dest_element, 'CNPJ'),
        'CPF_dest': get_text_from_element(dest_element, 'CPF'),
        'xNome_dest': get_text_from_element(dest_element, 'xNome'),
        'indIEDest_dest': get_text_from_element(dest_element, 'indIEDest'),
        'xLgr_enderDest': get_text_from_element(enderDest_element, 'xLgr'),
        'nro_enderDest': get_text_from_element(enderDest_element, 'nro'),
        'xBairro_enderDest': get_text_from_element(enderDest_element, 'xBairro'),
        'cMun_enderDest': get_text_from_element(enderDest_element, 'cMun'),
        'xMun_enderDest': get_text_from_element(enderDest_element, 'xMun'),
        'UF_enderDest': get_text_from_element(enderDest_element, 'UF'),
        'CEP_enderDest': get_text_from_element(enderDest_element, 'CEP'),
        'cPais_enderDest': get_text_from_element(enderDest_element, 'cPais'),
        'xPais_enderDest': get_text_from_element(enderDest_element, 'xPais')
    }

# Extração de dados do elemento TOTAL
def extract_total_data(infnfe_element):
    total_element = infnfe_element.find('.//nfe:total', namespaces=namespace)
    ICMSTot_element = total_element.find('.//nfe:ICMSTot', namespaces=namespace) if total_element is not None else None
    return {
        'vBC_ICMSTot': get_text_from_element(ICMSTot_element, 'vBC'),
        'vICMS_ICMSTot': get_text_from_element(ICMSTot_element, 'vICMS'),
        'vICMSDeson_ICMSTot': get_text_from_element(ICMSTot_element, 'vICMSDeson'),
        'vFCP_ICMSTot': get_text_from_element(ICMSTot_element, 'vFCP'),
        'vBCST_ICMSTot': get_text_from_element(ICMSTot_element, 'vBCST'),
        'vST_ICMSTot': get_text_from_element(ICMSTot_element, 'vST'),
        'vFCPST_ICMSTot': get_text_from_element(ICMSTot_element, 'vFCPST'),
        'vFCPSTRet_ICMSTot': get_text_from_element(ICMSTot_element, 'vFCPSTRet'),
        'vProd_Total_ICMSTot': get_text_from_element(ICMSTot_element, 'vProd'),
        'vFrete_ICMSTot': get_text_from_element(ICMSTot_element, 'vFrete'),
        'vSeg_ICMSTot': get_text_from_element(ICMSTot_element, 'vSeg'),
        'vDesc_ICMSTot': get_text_from_element(ICMSTot_element, 'vDesc'),
        'vII_ICMSTot': get_text_from_element(ICMSTot_element, 'vII'),
        'vIPI_ICMSTot': get_text_from_element(ICMSTot_element, 'vIPI'),
        'vIPIDevol_ICMSTot': get_text_from_element(ICMSTot_element, 'vIPIDevol'),
        'vPIS_ICMSTot': get_text_from_element(ICMSTot_element, 'vPIS'),
        'vCOFINS_ICMSTot': get_text_from_element(ICMSTot_element, 'vCOFINS'),
        'vOutro_ICMSTot': get_text_from_element(ICMSTot_element, 'vOutro'),
        'vNF_ICMSTot': get_text_from_element(ICMSTot_element, 'vNF'),
        'vTotTrib_ICMSTot': get_text_from_element(ICMSTot_element, 'vTotTrib')
    }

# Extração de dados do elemento DET
def extract_det_data(det_element):
    prod_element = det_element.find('.//nfe:prod', namespaces=namespace)
    imposto_element = det_element.find('.//nfe:imposto', namespaces=namespace)
    icms_element = imposto_element.find('.//nfe:ICMS', namespaces=namespace)
    icms10_element = icms_element.find('.//nfe:ICMS10', namespaces=namespace) if icms_element is not None else None
    icms00_element = icms_element.find('.//nfe:ICMS00', namespaces=namespace) if icms_element is not None else None
    return {
        'n_item': str(det_element.get('nItem')),
        'cProd_prod': get_text_from_element(prod_element, 'cProd'),
        'cEAN_prod': get_text_from_element(prod_element, 'cEAN'),
        'xProd_prod': get_text_from_element(prod_element, 'xProd'),
        'NCM_prod': get_text_from_element(prod_element, 'NCM'),
        'CFOP_prod': get_text_from_element(prod_element, 'CFOP'),
        'uCom_prod': get_text_from_element(prod_element, 'uCom'),
        'qCom_prod': get_text_from_element(prod_element, 'qCom'),
        'vUnCom_prod': get_text_from_element(prod_element, 'vUnCom'),
        'vProd_prod': get_text_from_element(prod_element, 'vProd'),
        'cEANTrib_prod': get_text_from_element(prod_element, 'cEANTrib'),
        'uTrib_prod': get_text_from_element(prod_element, 'uTrib'),
        'qTrib_prod': get_text_from_element(prod_element, 'qTrib'),
        'vUnTrib_prod': get_text_from_element(prod_element, 'vUnTrib'),
        'indTot_prod': get_text_from_element(prod_element, 'indTot'),
        'vTotTrib_imposto': get_text_from_element(imposto_element, 'vTotTrib')
    }, {
        'pMVAST': get_text_from_element(icms10_element, 'pMVAST'),
        'orig_icms00': get_text_from_element(icms00_element, 'orig'),
        'CST_icms00': get_text_from_element(icms00_element, 'CST'),
        'modBC_icms00': get_text_from_element(icms00_element, 'modBC'),
        'vBC_icms00': get_text_from_element(icms00_element, 'vBC'),
        'pICMS_icms00': get_text_from_element(icms00_element, 'pICMS'),
        'vICMS_icms00': get_text_from_element(icms00_element, 'vICMS'),
        'cEnq_ipi': get_text_from_element(imposto_element, 'cEnq', 'IPI'),
        'CST_ipi_imposto': get_text_from_element(imposto_element, 'CST', 'IPINT'),
        'CST_PIS': get_text_from_element(imposto_element, 'CST', 'PISAliq'),
        'vBC_PIS': get_text_from_element(imposto_element, 'vBC', 'PISAliq'),
        'pPIS_PIS': get_text_from_element(imposto_element, 'pPIS', 'PISAliq'),
        'vPIS_PIS': get_text_from_element(imposto_element, 'vPIS', 'PISAliq'),
        'CST_COFINS_cofinsaliq': get_text_from_element(imposto_element, 'CST', 'COFINSAliq'),
        'vBC_COFINS_cofinsaliq': get_text_from_element(imposto_element, 'vBC', 'COFINSAliq'),
        'pCOFINS_cofinsaliq': get_text_from_element(imposto_element, 'pCOFINS', 'COFINSAliq'),
        'vCOFINS_cofinsaliq': get_text_from_element(imposto_element, 'vCOFINS', 'COFINSAliq')
    }

# Inserção dos dados no banco de dados
def insert_into_db(cursor, ide_data, emit_data, dest_data, total_data, prod_data, imposto_data):
    try:
        cursor.execute(
            """
            INSERT INTO Notas_Saidas 
            (
                nfe_id, cUF_ide, cNF_ide, natOp_ide, mod_ide, serie_ide, nNF_ide, dhEmi_ide, dhSaiEnt_ide, tpNF_ide, idDest_ide, cMunFG_ide, tpImp_ide, tpEmis_ide, cDV_ide, tpAmb_ide, 
                finNFe_ide, indFinal_ide, indPres_ide, indIntermed_ide, procEmi_ide, verProc_ide, CNPJ_emit, xNome_emit, xFant_emit, xLgr_enderEmit, nro_enderEmit, xCpl_enderEmit, 
                xBairro_enderEmit, cMun_enderEmit, xMun_enderEmit, UF_enderEmit, CEP_enderEmit, cPais_enderEmit, xPais_enderEmit, fone_enderEmit, IE_emit, IM_emit, CNAE_emit, CRT_emit, 
                CNPJ_dest, CPF_dest, xNome_dest, indIEDest_dest, xLgr_enderDest, nro_enderDest, xBairro_enderDest, cMun_enderDest, xMun_enderDest, UF_enderDest, CEP_enderDest, 
                cPais_enderDest, xPais_enderDest, vBC_ICMSTot, vICMS_ICMSTot, vICMSDeson_ICMSTot, vFCP_ICMSTot, vBCST_ICMSTot, vST_ICMSTot, vFCPST_ICMSTot, 
                vFCPSTRet_ICMSTot, vProd_Total_ICMSTot, vFrete_ICMSTot, vSeg_ICMSTot, vDesc_ICMSTot, vII_ICMSTot, vIPI_ICMSTot, vIPIDevol_ICMSTot, vPIS_ICMSTot, vCOFINS_ICMSTot, 
                vOutro_ICMSTot, vNF_ICMSTot, vTotTrib_ICMSTot, cProd_prod, cEAN_prod, xProd_prod, NCM_prod, CFOP_prod, uCom_prod, qCom_prod, vUnCom_prod, vProd_prod, cEANTrib_prod, 
                uTrib_prod, qTrib_prod, vUnTrib_prod, indTot_prod, vTotTrib_imposto, orig_icms00, CST_icms00, modBC_icms00, vBC_icms00, pICMS_icms00, vICMS_icms00, cEnq_ipi, 
                CST_ipi_imposto, CST_PIS, vBC_PIS, pPIS_PIS, vPIS_PIS, CST_COFINS_cofinsaliq, vBC_COFINS_cofinsaliq, pCOFINS_cofinsaliq, vCOFINS_cofinsaliq, pMVAST
            ) 
            VALUES 
            (
                ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, 
                ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, 
                ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, 
                ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, 
                ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?
            )
            """,
            (
                ide_data['nfe_id'], ide_data['cUF_ide'], ide_data['cNF_ide'], ide_data['natOp_ide'], ide_data['mod_ide'], ide_data['serie_ide'], ide_data['nNF_ide'], ide_data['dhEmi_ide'], ide_data['dhSaiEnt_ide'], ide_data['tpNF_ide'], ide_data['idDest_ide'], ide_data['cMunFG_ide'], ide_data['tpImp_ide'], ide_data['tpEmis_ide'], ide_data['cDV_ide'], ide_data['tpAmb_ide'], 
                ide_data['finNFe_ide'], ide_data['indFinal_ide'], ide_data['indPres_ide'], ide_data['indIntermed_ide'], ide_data['procEmi_ide'], ide_data['verProc_ide'], emit_data['CNPJ_emit'], emit_data['xNome_emit'], emit_data['xFant_emit'], emit_data['xLgr_enderEmit'], emit_data['nro_enderEmit'], emit_data['xCpl_enderEmit'], 
                emit_data['xBairro_enderEmit'], emit_data['cMun_enderEmit'], emit_data['xMun_enderEmit'], emit_data['UF_enderEmit'], emit_data['CEP_enderEmit'], emit_data['cPais_enderEmit'], emit_data['xPais_enderEmit'], emit_data['fone_enderEmit'], emit_data['IE_emit'], emit_data['IM_emit'], emit_data['CNAE_emit'], emit_data['CRT_emit'], 
                dest_data['CNPJ_dest'], dest_data['CPF_dest'], dest_data['xNome_dest'], dest_data['indIEDest_dest'], dest_data['xLgr_enderDest'], dest_data['nro_enderDest'], dest_data['xBairro_enderDest'], dest_data['cMun_enderDest'], dest_data['xMun_enderDest'], dest_data['UF_enderDest'], dest_data['CEP_enderDest'], 
                dest_data['cPais_enderDest'], dest_data['xPais_enderDest'], total_data['vBC_ICMSTot'], total_data['vICMS_ICMSTot'], total_data['vICMSDeson_ICMSTot'], total_data['vFCP_ICMSTot'], total_data['vBCST_ICMSTot'], total_data['vST_ICMSTot'], total_data['vFCPST_ICMSTot'], 
                total_data['vFCPSTRet_ICMSTot'], total_data['vProd_Total_ICMSTot'], total_data['vFrete_ICMSTot'], total_data['vSeg_ICMSTot'], total_data['vDesc_ICMSTot'], total_data['vII_ICMSTot'], total_data['vIPI_ICMSTot'], total_data['vIPIDevol_ICMSTot'], total_data['vPIS_ICMSTot'], total_data['vCOFINS_ICMSTot'], 
                total_data['vOutro_ICMSTot'], total_data['vNF_ICMSTot'], total_data['vTotTrib_ICMSTot'], prod_data['cProd_prod'], prod_data['cEAN_prod'], prod_data['xProd_prod'], prod_data['NCM_prod'], prod_data['CFOP_prod'], prod_data['uCom_prod'], prod_data['qCom_prod'], prod_data['vUnCom_prod'], prod_data['vProd_prod'], prod_data['cEANTrib_prod'], 
                prod_data['uTrib_prod'], prod_data['qTrib_prod'], prod_data['vUnTrib_prod'], prod_data['indTot_prod'], prod_data['vTotTrib_imposto'], imposto_data['orig_icms00'], imposto_data['CST_icms00'], imposto_data['modBC_icms00'], imposto_data['vBC_icms00'], imposto_data['pICMS_icms00'], imposto_data['vICMS_icms00'], imposto_data['cEnq_ipi'], 
                imposto_data['CST_ipi_imposto'], imposto_data['CST_PIS'], imposto_data['vBC_PIS'], imposto_data['pPIS_PIS'], imposto_data['vPIS_PIS'], imposto_data['CST_COFINS_cofinsaliq'], imposto_data['vBC_COFINS_cofinsaliq'], imposto_data['pCOFINS_cofinsaliq'], imposto_data['vCOFINS_cofinsaliq'], imposto_data['pMVAST']
            )
        )
        cursor.connection.commit()
    except pyodbc.Error as e:
        print(f"Erro ao inserir dados no banco de dados: {str(e)}")

# Função auxiliar para extrair texto de elementos XML
def get_text_from_element(element, tag, parent_tag=None):
    if element is None:
        return '0'
    if parent_tag:
        parent = element.find(f'.//nfe:{parent_tag}', namespaces=namespace)
        if parent is not None:
            child = parent.find(f'.//nfe:{tag}', namespaces=namespace)
            return str(child.text) if child is not None else '0'
    else:
        child = element.find(f'.//nfe:{tag}', namespaces=namespace)
        return str(child.text) if child is not None else '0'
    return '0'

# Processo principal
def main():
    connection = connect_to_database()
    if connection is None:
        return

    cursor = connection.cursor()
    while True:
        url = f'https://bling.com.br/Api/v2/notasfiscais/page={page}/json?apikey={api_key}&filters=dataEmissao[01/01/2023 TO 20/02/2024];tipo[{tipo}]'
        response = make_request_with_retry(url)
        if response is None:
            print("Não foi possível obter resposta após várias tentativas. Encerrando o processo.")
            break

        if response.status_code == 200:
            data = response.json()
            if 'retorno' in data and 'notasfiscais' in data['retorno']:
                notas_fiscais = data['retorno']['notasfiscais']
                for nota in notas_fiscais:
                    if 'notafiscal' in nota and 'xml' in nota['notafiscal']:
                        xml_url = nota['notafiscal']['xml']
                        xml_data = get_xml_data(xml_url)
                        if xml_data:
                            insert_data_into_database(cursor, xml_data)
            else:
                print("Nenhuma nota fiscal encontrada na resposta.")
                break

        elif response.status_code == 400:
            error_response = response.json()
            if 'retorno' in error_response and 'erros' in error_response['retorno']:
                erros = error_response['retorno']['erros']
                erro_14_encontrado = any(erro.get('erro', {}).get('cod') == 14 for erro in erros)
                if erro_14_encontrado:
                    print("Não há mais informações disponíveis. Encerrando o processo.")
                    break
        else:
            print(f"Erro na solicitação HTTP: Código {response.status_code}")

        global page
        page += 1
        time.sleep(0.6)

    connection.close()

if __name__ == "__main__":
    main()
